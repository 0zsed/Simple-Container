pipeline {
  environment {
    registry = "reach2johnny/app"
    registryCredential = 'dockerhub'
    dockerImage = ''
  }
  agent any
  tools {maven 'Maven' }
  stages {
    stage('Cloning Git') {
      steps {
        git 'https://github.com/johnsimon007/my-app.git'
      }
    }
    stage('Build') {
       steps {
         sh 'mvn clean package'
       }
    }
    stage('Building Docker') {
      steps{
        script {
          dockerImage = docker.build registry + ":$BUILD_NUMBER"
        }
      }
    }
    stage('Push Docker') {
      steps{
         script {
            docker.withRegistry( '', registryCredential ) {
            dockerImage.push()
          }
        }
      }
    }
    stage('Remove Unused Docker') {
      steps{
        sh "docker rmi $registry:$BUILD_NUMBER"
      }
    }
    stage('Pull Docker') {
      steps{
         script {
            sh "docker pull $registry:$BUILD_NUMBER"
          }
        }
        }
        stage ('Deploy-To-Tomcat') {
            steps {
            sh '''
               rm -r /opt/tomcat/webapps/WebApp.war || true
               cp /var/lib/jenkins/workspace/'Container Security'/target/*.war /opt/tomcat/webapps/
               '''
	       }        
    	}
  }stage('DAST') {
   	 parallel {
   		 stage ('Port Scan') {
		    steps {
			sh 'rm nmap* || true'
			sh 'docker run --rm -v "$(pwd)":/data uzyexe/nmap -sS -sV -oX nmap 125.16.130.146'
			sh 'cat nmap'
		    }
	    }
	
	    stage ('Zap Scan') {
		  
		    	steps {
			      sh 'docker run -t owasp/zap2docker-stable zap-baseline.py -t http://10.201.14.15:8081/WebApp/ || true'
			    }
			
		}    
	
	    stage ('Nikto Scan') {
		    steps {
			sh 'rm nikto-output.xml || true'
			sh 'docker pull secfigo/nikto:latest'
			sh 'docker run secfigo/nikto:latest -h 10.201.14.15 -p 8081 -output /report/nikto-output.xml'
			 
		    }
	    }
	    
	    stage ('SSL Checks') {
		    steps {
			
			sh 'cat sslyze-output.json'
				}
		   	 }
	   	}
	}
}
