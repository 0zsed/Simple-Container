pipeline{
  agent any 
  
  stages{
    stage('Analysis'){
    steps{
      script{
        dir(INPUT_LOCATION) {
          files = findFiles(glob: '*.*')
        }       
        files.each { f ->
          def TASK_COLLECTION = [:]
          TASK_COLLECTION["Qark"] ={
          sh 'wget "https://raw.githubusercontent.com/linkedin/qark/master/qark/qark.py"'
          sh 'chmod +x qark.py'
            sh "python qark.py --source 1 --apk ${env.INPUT_LOCATION}/${f} --exploit 0"
          }
          TASK_COLLECTION["MOBSF"] ={
           def AUTH_KEY = '26b50122897b1abaedcafad8c30535376b5b681b7cb52111b375036f09efca17'
    upload_cmd = "curl -s -S -F 'file=@${env.INPUT_LOCATION}/${f}' http://localhost:8000/api/v1/upload -H 'Authorization:${AUTH_KEY}'"
       upload_result = sh label: 'Upload Binary', returnStdout: true, script: upload_cmd
                      
    def response_map = readJSON text: upload_result
    def app_type = response_map["scan_type"]
       def app_hash = response_map["hash"]
       def app_name = response_map["file_name"]
                      
    scan_start_cmd = "curl -s -S -X POST --url http://localhost:8000/api/v1/scan --data 'scan_type=${app_type}&file_name=${app_name}&hash=${app_hash}' -H 'Authorization:${AUTH_KEY}'"
       sh label: 'Start Scan of Binary', returnStdout: true, script: scan_start_cmd
          }
         parallel(TASK_COLLECTION) 
        }
      }
    }
  }}
}
